// Fill out your copyright notice in the Description page of Project Settings.


#include "AI/BTTasks/BTTask_MeleeAttack.h"
#include "Interfaces/BTInterfaces/CombatInterface.h"
#include "AI/NPC_AIController.h"
#include "Kismet/KismetSystemLibrary.h"
#include "Runtime/Engine/Classes/Engine/World.h"
#include "Engine/LatentActionManager.h"
#include "Components/SkeletalMeshComponent.h"
#include "Animation/AnimMontage.h"
#include "Animation/AnimInstance.h"

UBTTask_MeleeAttack::UBTTask_MeleeAttack()
{
	NodeName = TEXT("Melee Attack");
}

EBTNodeResult::Type UBTTask_MeleeAttack::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)
{
	// to not attact when out of range
	auto const OutOfRange = !OwnerComp.GetBlackboardComponent()->GetValueAsBool(GetSelectedBlackboardKey());
	if (OutOfRange)
	{
		FinishLatentTask(OwnerComp, EBTNodeResult::Succeeded);
		return EBTNodeResult::Succeeded;
	}

	// to do when in range
	auto const* const Controller = OwnerComp.GetAIOwner(); //auto* const Controller = Cast<ANPC_AIController>(OwnerComp.GetAIOwner());
	auto* const NPC = Cast<ANPCCharacter>(Controller->GetPawn());

	// use the Combat interfacce on the NPC
	if (auto* const CombatInterface = Cast<ICombatInterface>(NPC))
	{
		//CombatInterface->Execute_MeleeAttack(NPC);// testing
		if (MontageHasFinished(NPC))// checking if NPC is already playing a montage, NOTE: Exteremely important. 
		{
			CombatInterface->Execute_MeleeAttack(NPC); ///// NOTE: Execute_MeleeAttack is function generated by the engine for the MeleeAttack_Implementation, They anlso need a ref to the object that the function will run on, the NPC in this case.
		}
	}
	
	// Finish the task.
	FinishLatentTask(OwnerComp, EBTNodeResult::Succeeded);
	return EBTNodeResult::Succeeded;
}

bool UBTTask_MeleeAttack::MontageHasFinished(ANPCCharacter* const NPC) // this is to check if the NPC is already playing a montage so that it can finish that first
{
	return NPC->GetMesh()->GetAnimInstance()->Montage_GetIsStopped(NPC->GetMontage());
}
